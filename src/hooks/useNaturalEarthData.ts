import { useState, useEffect } from 'react';
import { 
  NATURAL_EARTH_SOURCES, 
  getSourceByZoomLevel, 
  CONTINENT_GROUPS, 
  getFeatureName, 
  getFeatureContinent,
  logDataSourcePerformance, 
  validateGeoJSONData 
} from '@/utils/naturalEarthSources';

// üéØ TIPOS SIMPLIFICADOS
interface ProcessedBoundary {
  name: string;
  type: string;
  coordinates: [number, number][][];
  properties: {
    name: string;
    name_en?: string;
    continent?: string;
    [key: string]: any;
  };
}

interface UseNaturalEarthDataProps {
  zoom: number;
}

// üåç HOOK PRINCIPAL - APENAS NATURAL EARTH
export const useNaturalEarthData = ({ zoom }: UseNaturalEarthDataProps) => {
  const [boundaries, setBoundaries] = useState<ProcessedBoundary[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [datasetType, setDatasetType] = useState<string>('');

  // üîÑ CARREGAR COM SISTEMA DE FALLBACK
  const loadWithFallback = async (source: any, zoomLevel: number): Promise<any | null> => {
    // URLs de fallback para cada tipo
    const fallbackUrls: { [key: string]: string[] } = {
      'continents': [
        source.url, // URL original
        'https://cdn.jsdelivr.net/npm/world-atlas@3/countries-110m.json',
        'https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson'
      ],
      'countries': [
        source.url, // URL original
        'https://cdn.jsdelivr.net/npm/world-atlas@3/countries-50m.json',
        'https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson'
      ],
      'states': [
        source.url, // URL original
        'https://cdn.jsdelivr.net/npm/world-atlas@3/countries-50m.json' // Fallback para pa√≠ses
      ],
      'cities': [
        source.url, // URL original
        'https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson' // Fallback para pa√≠ses
      ]
    };

    const urls = fallbackUrls[source.type] || [source.url];
    
    for (let i = 0; i < urls.length; i++) {
      const url = urls[i];
      const isOriginal = i === 0;
      
      try {
        console.log(`üì° Tentativa ${i + 1}/${urls.length}: ${isOriginal ? source.name : `Fallback ${i}`}`);
        
        const startTime = performance.now();
        const response = await fetch(url);
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const responseText = await response.text();
        const dataSize = new Blob([responseText]).size;
        const geoJsonData = JSON.parse(responseText);
        
        const loadTime = performance.now() - startTime;
        
        if (isOriginal) {
          logDataSourcePerformance(source.name, loadTime, dataSize);
        } else {
          console.log(`üìä Fallback ${i} - ${Math.round(loadTime)}ms, ${(dataSize / 1024).toFixed(2)}KB`);
        }
        
        if (!validateGeoJSONData(geoJsonData)) {
          throw new Error('Dados GeoJSON inv√°lidos');
        }
        
        console.log(`‚úÖ ${isOriginal ? 'Fonte original' : `Fallback ${i}`} funcionou: ${geoJsonData.features.length} features`);
        return geoJsonData;
        
      } catch (err) {
        console.warn(`‚ö†Ô∏è Tentativa ${i + 1} falhou:`, err);
        if (i === urls.length - 1) {
          console.error(`‚ùå Todas as ${urls.length} tentativas falharam para ${source.type}`);
        }
      }
    }
    
    return null;
  };

  // üéØ CARREGAR DADOS NATURAL EARTH
  const loadNaturalEarthData = async (zoomLevel: number) => {
    setIsLoading(true);
    setError(null);
    
    try {
      const source = getSourceByZoomLevel(zoomLevel);
      setDatasetType(source.type);
      
      console.log(`üåç Carregando Natural Earth - ${source.name} (Zoom ${zoomLevel})`);
      
      // CASO ESPECIAL: CONTINENTES
      if (source.type === 'continents') {
        const continentData = await loadContinentData();
        setBoundaries(continentData);
        setIsLoading(false);
        return;
      }
      
      // CARREGAR DADOS COM SISTEMA DE FALLBACK
      const geoJsonData = await loadWithFallback(source, zoomLevel);
      
      if (!geoJsonData) {
        throw new Error('Todas as fontes falharam');
      }
      
      console.log(`‚úÖ Natural Earth carregado: ${geoJsonData.features.length} features`);
      
      // PROCESSAR DADOS
      const processedData = processNaturalEarthData(geoJsonData, source.type);
      setBoundaries(processedData);
      
    } catch (err) {
      console.error('‚ùå Erro ao carregar Natural Earth:', err);
      setError(err instanceof Error ? err.message : 'Erro desconhecido');
      setBoundaries([]);
    } finally {
      setIsLoading(false);
    }
  };

  // üîç CLASSIFICAR PA√çS POR NOME (FALLBACK)
  const classifyByCountryName = (countryName: string): string => {
    const name = countryName.toLowerCase();
    
    // Am√©rica do Sul
    if (['brazil', 'argentina', 'chile', 'peru', 'colombia', 'venezuela', 'ecuador', 'bolivia', 'paraguay', 'uruguay', 'guyana', 'suriname', 'french guiana'].some(c => name.includes(c))) {
      return 'Am√©rica do Sul';
    }
    
    // Am√©rica do Norte
    if (['united states', 'canada', 'mexico', 'guatemala', 'belize', 'costa rica', 'panama', 'honduras', 'nicaragua', 'el salvador', 'cuba', 'haiti', 'dominican republic', 'jamaica', 'trinidad', 'barbados', 'bahamas'].some(c => name.includes(c))) {
      return 'Am√©rica do Norte';
    }
    
    // Europa
    if (['germany', 'france', 'spain', 'italy', 'united kingdom', 'poland', 'romania', 'netherlands', 'belgium', 'greece', 'portugal', 'czech', 'hungary', 'sweden', 'austria', 'switzerland', 'bulgaria', 'serbia', 'denmark', 'finland', 'slovakia', 'norway', 'ireland', 'bosnia', 'croatia', 'albania', 'lithuania', 'slovenia', 'latvia', 'estonia', 'macedonia', 'moldova', 'luxembourg', 'malta', 'iceland', 'montenegro', 'belarus', 'ukraine', 'russia'].some(c => name.includes(c))) {
      return 'Europa';
    }
    
    // √Åfrica
    if (['south africa', 'nigeria', 'egypt', 'ethiopia', 'kenya', 'uganda', 'algeria', 'sudan', 'morocco', 'angola', 'ghana', 'mozambique', 'madagascar', 'cameroon', 'ivory coast', 'burkina faso', 'mali', 'malawi', 'zambia', 'senegal', 'somalia', 'chad', 'zimbabwe', 'guinea', 'rwanda', 'benin', 'tunisia', 'burundi', 'togo', 'sierra leone', 'libya', 'liberia', 'central african', 'mauritania', 'eritrea', 'gambia', 'botswana', 'namibia', 'gabon', 'lesotho', 'guinea-bissau', 'equatorial guinea', 'mauritius', 'swaziland', 'djibouti', 'comoros', 'cape verde', 'sao tome'].some(c => name.includes(c))) {
      return '√Åfrica';
    }
    
    // √Åsia
    if (['china', 'india', 'indonesia', 'pakistan', 'bangladesh', 'japan', 'philippines', 'vietnam', 'turkey', 'iran', 'thailand', 'myanmar', 'south korea', 'iraq', 'afghanistan', 'uzbekistan', 'malaysia', 'nepal', 'yemen', 'north korea', 'sri lanka', 'kazakhstan', 'cambodia', 'jordan', 'azerbaijan', 'tajikistan', 'israel', 'laos', 'singapore', 'lebanon', 'kyrgyzstan', 'turkmenistan', 'syria', 'armenia', 'mongolia', 'georgia', 'kuwait', 'qatar', 'bahrain', 'brunei', 'bhutan', 'maldives', 'oman', 'palestine', 'saudi arabia'].some(c => name.includes(c))) {
      return '√Åsia';
    }
    
    // Oceania
    if (['australia', 'new zealand', 'papua new guinea', 'fiji', 'solomon islands', 'vanuatu', 'samoa', 'micronesia', 'tonga', 'kiribati', 'palau', 'marshall islands', 'tuvalu', 'nauru'].some(c => name.includes(c))) {
      return 'Oceania';
    }
    
    return 'Desconhecido';
  };

  // üåç DADOS DE CONTINENTES (AGRUPADOS A PARTIR DOS PA√çSES)
  const loadContinentData = async (): Promise<ProcessedBoundary[]> => {
    console.log('üåç Criando continentes a partir de 177 pa√≠ses Natural Earth...');
    
    try {
      // Carregar pa√≠ses Natural Earth 110m para agrupar por continente
      const response = await fetch(NATURAL_EARTH_SOURCES[0].url);
      if (!response.ok) throw new Error('Erro ao carregar pa√≠ses para continentes');
      
      const geoJsonData = await response.json();
      if (!validateGeoJSONData(geoJsonData)) throw new Error('Dados inv√°lidos');
      
      console.log(`üìä Processando ${geoJsonData.features.length} pa√≠ses para criar continentes...`);
      
      // Agrupar pa√≠ses por continente usando propriedade CONTINENT
      const continentBoundaries: { [key: string]: any[] } = {};
      
      // Primeiro, vamos analisar todas as propriedades dispon√≠veis
      console.log('üîç Analisando propriedades dos pa√≠ses para classifica√ß√£o...');
      const sampleFeature = geoJsonData.features[0];
      if (sampleFeature?.properties) {
        console.log('üìã Propriedades dispon√≠veis:', Object.keys(sampleFeature.properties));
      }
      
      geoJsonData.features.forEach((feature: any, index: number) => {
        const countryName = getFeatureName(feature);
        
        // Usar m√∫ltiplas propriedades para classificar continente
        let continent = feature.properties?.CONTINENT || 
                       feature.properties?.continent ||
                       feature.properties?.REGION_WB ||
                       feature.properties?.SUBREGION ||
                       getFeatureContinent(feature);
        
        // Mapear varia√ß√µes de nomes para portugu√™s
        const continentMap: { [key: string]: string } = {
          // Nomes padr√£o
          'South America': 'Am√©rica do Sul',
          'North America': 'Am√©rica do Norte', 
          'Europe': 'Europa',
          'Africa': '√Åfrica',
          'Asia': '√Åsia',
          'Oceania': 'Oceania',
          'Antarctica': 'Ant√°rtida',
          
          // Varia√ß√µes do World Bank
          'Latin America & Caribbean': 'Am√©rica do Sul',
          'Europe & Central Asia': 'Europa',
          'Sub-Saharan Africa': '√Åfrica',
          'Middle East & North Africa': '√Åfrica',
          'East Asia & Pacific': '√Åsia',
          'South Asia': '√Åsia',
          
          // Varia√ß√µes de sub-regi√µes
          'Northern America': 'Am√©rica do Norte',
          'Central America': 'Am√©rica do Norte',
          'Caribbean': 'Am√©rica do Norte',
          'Southern America': 'Am√©rica do Sul',
          'Northern Europe': 'Europa',
          'Western Europe': 'Europa',
          'Eastern Europe': 'Europa',
          'Southern Europe': 'Europa',
          'Northern Africa': '√Åfrica',
          'Western Africa': '√Åfrica',
          'Eastern Africa': '√Åfrica',
          'Middle Africa': '√Åfrica',
          'Southern Africa': '√Åfrica',
          'Western Asia': '√Åsia',
          'Central Asia': '√Åsia',
          'Eastern Asia': '√Åsia',
          'South-Eastern Asia': '√Åsia',
          'Southern Asia': '√Åsia',
          'Australia and New Zealand': 'Oceania',
          'Melanesia': 'Oceania',
          'Micronesia': 'Oceania',
          'Polynesia': 'Oceania'
        };
        
        continent = continentMap[continent] || continent;
        
        // Se ainda n√£o classificou, tentar por nome do pa√≠s
        if (!continent || continent === 'Desconhecido' || continent === continent.toLowerCase()) {
          continent = classifyByCountryName(countryName);
        }
        
        if (continent && continent !== 'Desconhecido') {
          if (!continentBoundaries[continent]) {
            continentBoundaries[continent] = [];
          }
          continentBoundaries[continent].push(feature);
          
          if (continentBoundaries[continent].length <= 5) {
            console.log(`üìç ${continent}: ${countryName}`);
          }
        } else {
          console.warn(`‚ö†Ô∏è Pa√≠s n√£o classificado: ${countryName} (propriedades: ${JSON.stringify(feature.properties)})`);
        }
      });
      
      // Mostrar resumo da classifica√ß√£o
      const totalCountries = geoJsonData.features.length;
      const classifiedCountries = Object.values(continentBoundaries).reduce((acc, countries) => acc + countries.length, 0);
      const unclassifiedCount = totalCountries - classifiedCountries;
      
      console.log(`üìä Classifica√ß√£o completa:`);
      console.log(`   Total pa√≠ses: ${totalCountries}`);
      console.log(`   Classificados: ${classifiedCountries}`);
      console.log(`   N√£o classificados: ${unclassifiedCount}`);
      
      Object.entries(continentBoundaries).forEach(([continent, countries]) => {
        console.log(`   ${continent}: ${countries.length} pa√≠ses`);
      });
      
      // Criar continentes usando geometrias reais dos pa√≠ses (n√£o quadrados!)
      const continents: ProcessedBoundary[] = [];
      
      Object.entries(continentBoundaries).forEach(([continentName, countries]) => {
        if (countries.length > 0) {
          console.log(`üåç Criando continente real: ${continentName} (${countries.length} pa√≠ses)`);
          
          // Coletar todas as coordenadas dos pa√≠ses do continente
          const allCoordinates: [number, number][][] = [];
          
          countries.forEach(country => {
            const processedCountry = processFeatureGeometry(country, 'country');
            if (processedCountry && processedCountry.coordinates) {
              // Adicionar todas as coordenadas do pa√≠s
              allCoordinates.push(...processedCountry.coordinates);
            }
          });
          
          if (allCoordinates.length > 0) {
            // Usar as geometrias reais dos pa√≠ses como continente
            continents.push({
              name: continentName,
              type: 'continent',
              coordinates: allCoordinates, // M√∫ltiplos pol√≠gonos dos pa√≠ses
              properties: {
                name: continentName,
                name_en: continentName,
                continent: continentName,
                countries: countries.length,
                polygons: allCoordinates.length
              }
            });
            
            console.log(`‚úÖ ${continentName}: ${countries.length} pa√≠ses, ${allCoordinates.length} pol√≠gonos reais`);
          }
        }
      });
      
      console.log(`üéâ Continentes criados: ${continents.length}`);
      continents.forEach(c => console.log(`  - ${c.name}: ${c.properties.countries} pa√≠ses`));
      
      return continents;
      
    } catch (error) {
      console.error('‚ùå Erro ao criar continentes:', error);
      return [];
    }
  };

  // üîÑ PROCESSAR DADOS NATURAL EARTH
  const processNaturalEarthData = (geoJsonData: any, dataType: string): ProcessedBoundary[] => {
    console.log(`üîÑ Processando ${geoJsonData.features.length} features Natural Earth (${dataType})`);
    
    const processed: ProcessedBoundary[] = [];

    geoJsonData.features.forEach((feature: any) => {
      const processedFeature = processFeatureGeometry(feature, dataType);
      if (processedFeature) {
        processed.push(processedFeature);
      }
    });

    console.log(`üéâ Natural Earth processado: ${processed.length} regi√µes v√°lidas`);
    return processed;
  };

  // üîß PROCESSAR GEOMETRIA DE FEATURE (COM VALIDA√á√ÉO ROBUSTA)
  const processFeatureGeometry = (feature: any, dataType: string): ProcessedBoundary | null => {
    try {
      const name = getFeatureName(feature);
      
      // üßä FILTRO PARA ANT√ÅRTIDA - DESABILITAR TEMPORARIAMENTE
      if (name && (
        name.toLowerCase().includes('antarctica') || 
        name.toLowerCase().includes('ant√°rtica') ||
        name.toLowerCase().includes('antarctic')
      )) {
        console.log('üßä Ant√°rtida filtrada e removida dos dados');
        return null;
      }
      
      if (!feature.geometry || !feature.geometry.coordinates) {
        console.warn('‚ö†Ô∏è Feature sem geometria:', name);
        return null;
      }

      let coordinates: [number, number][][];

      // Processar diferentes tipos de geometria
      if (feature.geometry.type === 'Polygon') {
        coordinates = feature.geometry.coordinates;
        
        // Validar coordenadas do pol√≠gono
        if (!validatePolygonCoordinates(coordinates, name)) {
          return null;
        }
        
      } else if (feature.geometry.type === 'MultiPolygon') {
        // Para MultiPolygon, pegar todos os pol√≠gonos v√°lidos
        const multiCoords = feature.geometry.coordinates;
        if (multiCoords.length === 0) {
          console.warn('‚ö†Ô∏è MultiPolygon vazio:', name);
          return null;
        }
        
        // Validar e filtrar pol√≠gonos v√°lidos
        const validPolygons = multiCoords.filter((polygon: any) => {
          return polygon && polygon.length > 0 && validatePolygonCoordinates(polygon, name);
        });
        
        if (validPolygons.length === 0) {
          console.warn('‚ö†Ô∏è Nenhum pol√≠gono v√°lido em MultiPolygon:', name);
          return null;
        }
        
        // Usar o maior pol√≠gono v√°lido
        coordinates = validPolygons.reduce((largest: any, current: any) => {
          return current[0].length > largest[0].length ? current : largest;
        });
        
        console.log(`üó∫Ô∏è MultiPolygon ${name}: ${validPolygons.length} pol√≠gonos v√°lidos, usando o maior (${coordinates[0].length} pontos)`);
        
      } else if (feature.geometry.type === 'Point') {
        // Para cidades - criar pequeno pol√≠gono baseado na popula√ß√£o
        const [lng, lat] = feature.geometry.coordinates;
        
        // Validar coordenadas do ponto
        if (typeof lng !== 'number' || typeof lat !== 'number' || 
            lng < -180 || lng > 180 || lat < -90 || lat > 90) {
          console.warn('‚ö†Ô∏è Coordenadas de ponto inv√°lidas:', name, lng, lat);
          return null;
        }
        
        // Tamanho baseado na popula√ß√£o da cidade
        const population = feature.properties?.POP_MAX || feature.properties?.population || 0;
        let size = 0.02; // Tamanho padr√£o
        
        if (population > 10000000) size = 0.15;      // Megacidades
        else if (population > 5000000) size = 0.12;  // Grandes cidades
        else if (population > 1000000) size = 0.08;  // Cidades grandes
        else if (population > 500000) size = 0.05;   // Cidades m√©dias
        else if (population > 100000) size = 0.03;   // Cidades pequenas
        
        coordinates = [[
          [lng - size, lat - size],
          [lng + size, lat - size],
          [lng + size, lat + size],
          [lng - size, lat + size],
          [lng - size, lat - size]
        ]];
        
        // Log para debug de cidades grandes
        if (population > 1000000) {
          console.log(`üèôÔ∏è Cidade grande: ${name} (${population.toLocaleString()} hab.) - Tamanho: ${size}¬∞`);
        }
      } else {
        console.warn('‚ö†Ô∏è Tipo de geometria n√£o suportado:', feature.geometry.type, 'para:', name);
        return null;
      }

      return {
        name,
        type: dataType,
        coordinates,
        properties: {
          name,
          name_en: feature.properties?.NAME_EN || name,
          continent: getFeatureContinent(feature),
          geometryType: feature.geometry.type,
          coordinateCount: coordinates[0]?.length || 0,
          ...feature.properties
        }
      };

    } catch (err) {
      console.error('‚ùå Erro ao processar feature:', err);
      return null;
    }
  };

  // üîç VALIDAR COORDENADAS DE POL√çGONO
  const validatePolygonCoordinates = (coordinates: any, countryName: string): boolean => {
    try {
      if (!Array.isArray(coordinates) || coordinates.length === 0) {
        console.warn(`‚ö†Ô∏è ${countryName}: Coordenadas n√£o s√£o array v√°lido`);
        return false;
      }
      
      const ring = coordinates[0]; // Primeiro anel (exterior)
      if (!Array.isArray(ring) || ring.length < 4) {
        console.warn(`‚ö†Ô∏è ${countryName}: Anel exterior inv√°lido (${ring?.length || 0} pontos)`);
        return false;
      }
      
      // Verificar se coordenadas s√£o v√°lidas
      let validCoords = 0;
      for (const coord of ring) {
        if (Array.isArray(coord) && coord.length >= 2) {
          const [lng, lat] = coord;
          if (typeof lng === 'number' && typeof lat === 'number' &&
              lng >= -180 && lng <= 180 && lat >= -90 && lat <= 90) {
            validCoords++;
          }
        }
      }
      
      const validPercent = (validCoords / ring.length) * 100;
      if (validPercent < 80) {
        console.warn(`‚ö†Ô∏è ${countryName}: Apenas ${validPercent.toFixed(1)}% das coordenadas s√£o v√°lidas (${validCoords}/${ring.length})`);
        return false;
      }
      
      if (validPercent < 100) {
        console.log(`‚ö†Ô∏è ${countryName}: ${validPercent.toFixed(1)}% coordenadas v√°lidas (${validCoords}/${ring.length}) - usando mesmo assim`);
      }
      
      return true;
      
    } catch (err) {
      console.error(`‚ùå Erro ao validar coordenadas de ${countryName}:`, err);
      return false;
    }
  };

  // üöÄ EFEITO PRINCIPAL
  useEffect(() => {
    loadNaturalEarthData(zoom);
  }, [zoom]);

  return {
    boundaries,
    isLoading,
    error,
    datasetType,
    reload: () => loadNaturalEarthData(zoom)
  };
}; 