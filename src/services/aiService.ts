import OpenAI from 'openai';

// Interface para dados espirituais gerados pela IA
interface SpiritualData {
  strongholds: string[];
  propheticWord: string;
  prayerTargets: Array<{
    title: string;
    description: string;
    category: 'government' | 'church' | 'social' | 'economic' | 'spiritual_warfare' | 'evangelism' | 'other';
    priority: number;
    spiritualContext: string;
  }>;
  spiritualAlerts: Array<{
    type: 'persecution' | 'idolatry' | 'warfare' | 'breakthrough' | 'revival';
    description: string;
    urgency: 'low' | 'medium' | 'high' | 'critical';
    prayerFocus: string;
  }>;
  geopoliticalSystem: {
    governmentType: string;
    keyPositions: string[];
    powerCenters: string[];
    dominantPhilosophy: string;
  };
  spiritualInfluences: Array<{
    name: string;
    manifestation: string;
    counterStrategy: string;
  }>;
  missionBases: Array<{
    name: string;
    organization: string;
    focus: string;
    impact: string;
  }>;
  revivalTestimonies: Array<{
    title: string;
    description: string;
    year: string;
    impact: string;
  }>;
  intercessorActions: string[];
  spiritualClimate: {
    description: string;
    challenges: string[];
    opportunities: string[];
    trends: string[];
  };
  churches: {
    estimate: number;
    denominations: string[];
    growth: string;
    spiritualTemperature: string;
  };
  culturalContext: string;
  languagesSpoken: string[];
  religiousComposition: Record<string, number>;
}

interface AIGenerationRequest {
  regionName: string;
  regionType: 'country' | 'state' | 'city' | 'neighborhood';
  countryCode?: string;
  parentRegion?: string;
  coordinates?: { lat: number; lng: number };
  context?: string;
}

class AIService {
  private openai: OpenAI | null = null;
  private isConfigured = false;
  private assistantId = 'asst_IHcyezjYgoubvHpqcJjwvt1n'; // Your registered assistant

  constructor() {
    console.log('ü§ñ AI Service inicializado');
    this.initializeOpenAI();
  }

  private initializeOpenAI() {
    // Use environment variable for API key (Vite only)
    const apiKey = import.meta.env.VITE_OPENAI_API_KEY;
    
    if (!apiKey) {
      console.warn('‚ö†Ô∏è Chave API da OpenAI n√£o configurada. Funcionalidade AI desabilitada.');
      this.isConfigured = false;
      return;
    }
    
    try {
      this.openai = new OpenAI({
        apiKey: apiKey,
        dangerouslyAllowBrowser: true
      });
      this.isConfigured = true;
      console.log('‚úÖ OpenAI Assistant configurado com sucesso');
      console.log(`üéØ Assistant ID: ${this.assistantId}`);
    } catch (error) {
      console.error('‚ùå Erro ao configurar OpenAI:', error);
      this.isConfigured = false;
    }
  }

  public setApiKey(apiKey: string) {
    // This method is kept for compatibility but now uses the secure key
    console.log('‚ö†Ô∏è Usando chave API pr√©-configurada para seguran√ßa');
    this.initializeOpenAI();
  }

  public isReady(): boolean {
    return this.isConfigured && !!this.openai;
  }

  public async generateSpiritualData(request: AIGenerationRequest): Promise<SpiritualData> {
    if (!this.isReady()) {
      throw new Error('AI Service n√£o configurado.');
    }

    try {
      console.log(`ü§ñ Iniciando gera√ß√£o com Assistant personalizado para ${request.regionName}...`);
      console.log(`üéØ Assistant ID: ${this.assistantId}`);

      // 1. Criar thread
      console.log('üìù Passo 1: Criando thread...');
      const thread = await this.openai!.beta.threads.create();
      console.log(`‚úÖ Thread criado: ${thread.id}`);

      // Create the prompt message
      const prompt = this.buildPrompt(request);

      // 2. Adicionar mensagem do usu√°rio ao thread
      console.log('üì§ Passo 2: Adicionando mensagem ao thread...');
      await this.openai!.beta.threads.messages.create(thread.id, {
        role: "user",
        content: prompt,
      });
      console.log('‚úÖ Mensagem adicionada ao thread');

      // 3. Executar o assistente
      console.log('üöÄ Passo 3: Executando assistant...');
      const run = await this.openai!.beta.threads.runs.create(thread.id, {
        assistant_id: this.assistantId
      });
      console.log(`‚úÖ Run criado: ${run.id}`);

      // 4. Aguardar conclus√£o (polling)
      console.log('‚è≥ Passo 4: Aguardando resposta do assistant...');
      let runStatus = run;
      let attempts = 0;
      const maxAttempts = 60; // 60 segundos timeout

      while (runStatus.status === 'queued' || runStatus.status === 'in_progress') {
        if (attempts >= maxAttempts) {
          throw new Error('‚è∞ Timeout: Assistant demorou muito para responder');
        }

        console.log(`‚è≥ Status: ${runStatus.status} (tentativa ${attempts + 1}/${maxAttempts})`);
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Alternative approach: use the runs object with correct parameters
        try {
          runStatus = await this.openai!.beta.threads.runs.retrieve(run.id, { thread_id: thread.id });
        } catch (retrieveError) {
          console.warn('‚ö†Ô∏è Retrieve error, trying alternative approach:', retrieveError);
          // Try fetching all runs and find the one we want
          const runs = await this.openai!.beta.threads.runs.list(thread.id);
          const currentRun = runs.data.find(r => r.id === run.id);
          if (currentRun) {
            runStatus = currentRun;
          } else {
            throw new Error('‚ùå Could not find run status');
          }
        }
        attempts++;
      }

      console.log(`üèÅ Status final: ${runStatus.status}`);

      // 5. Verificar se completou com sucesso
      if (runStatus.status === 'completed') {
        console.log('üì• Passo 5: Obtendo resposta do assistant...');
        
        // Buscar as mensagens do thread
        const messages = await this.openai!.beta.threads.messages.list(thread.id);
        
        // Pegar a √∫ltima mensagem (resposta do assistant)
        const assistantMessage = messages.data.find(msg => msg.role === 'assistant');
        
        if (assistantMessage && assistantMessage.content[0] && assistantMessage.content[0].type === 'text') {
          const content = assistantMessage.content[0].text.value;
          console.log('‚úÖ Resposta do assistant recebida');
          console.log(`üìù Tamanho da resposta: ${content.length} caracteres`);

          // Clean and parse JSON
          let cleanContent = content.trim();
          
          // Remove markdown formatting if present
          if (cleanContent.startsWith('```json')) {
            cleanContent = cleanContent.replace(/^```json\s*/, '').replace(/\s*```$/, '');
          } else if (cleanContent.startsWith('```')) {
            cleanContent = cleanContent.replace(/^```\s*/, '').replace(/\s*```$/, '');
          }
          
          // Try to find JSON content between { and }
          const jsonStart = cleanContent.indexOf('{');
          const jsonEnd = cleanContent.lastIndexOf('}');
          
          if (jsonStart !== -1 && jsonEnd !== -1 && jsonEnd > jsonStart) {
            cleanContent = cleanContent.substring(jsonStart, jsonEnd + 1);
          }

          console.log('üîÑ Parseando JSON...');
          const spiritualData = JSON.parse(cleanContent) as SpiritualData;
          
          console.log(`üéâ Dados gerados com sucesso para ${request.regionName}!`);
          return spiritualData;
        } else {
          throw new Error('‚ùå Resposta do assistant n√£o encontrada ou em formato inv√°lido');
        }
      } else if (runStatus.status === 'failed') {
        console.error('‚ùå Run falhou:', runStatus.last_error);
        throw new Error(`Assistant falhou: ${runStatus.last_error?.message || 'Erro desconhecido'}`);
      } else if (runStatus.status === 'expired') {
        throw new Error('‚è∞ Assistant expirou - tempo limite excedido');
      } else {
        throw new Error(`‚ùå Run terminou com status inesperado: ${runStatus.status}`);
      }

    } catch (error) {
      console.error('üí• Erro na gera√ß√£o AI:', error);
      throw new Error(`Falha na gera√ß√£o AI: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
    }
  }

  private buildPrompt(request: AIGenerationRequest): string {
    const { regionName, regionType, countryCode, parentRegion, context } = request;
    
    return `
‚ö†Ô∏è ATEN√á√ÉO: Use APENAS informa√ß√µes factuais e padr√µes gerais. N√ÉO INVENTE dados espec√≠ficos.

REGI√ÉO: ${regionName}
TIPO: ${regionType}
${countryCode ? `PA√çS: ${countryCode}` : ''}
${parentRegion ? `REGI√ÉO PAI: ${parentRegion}` : ''}
${context ? `CONTEXTO: ${context}` : ''}

Retorne um JSON com a seguinte estrutura, usando APENAS informa√ß√µes gerais e conservadoras:

{
  "strongholds": ["Use termos gerais como 'corrup√ß√£o', 'idolatria', 'secularismo'"],
  "propheticWord": "Palavra prof√©tica geral baseada em princ√≠pios b√≠blicos universais",
  "prayerTargets": [
    {
      "title": "Alvos gen√©ricos de ora√ß√£o",
      "description": "Descri√ß√µes baseadas em padr√µes conhecidos",
      "category": "government|church|social|economic|spiritual_warfare|evangelism|other",
      "priority": 1-5,
      "spiritualContext": "Contexto espiritual geral"
    }
  ],
  "spiritualAlerts": [
    {
      "type": "persecution|idolatry|warfare|breakthrough|revival",
      "description": "Alertas baseados em padr√µes regionais conhecidos",
      "urgency": "low|medium|high|critical",
      "prayerFocus": "Foco gen√©rico de ora√ß√£o"
    }
  ],
  "geopoliticalSystem": {
    "governmentType": "Tipo de governo conhecido (rep√∫blica, monarquia, etc.)",
    "keyPositions": ["Cargos gen√©ricos como 'Presidente', 'Primeiro-ministro'"],
    "powerCenters": ["Locais gen√©ricos como 'Capital', 'Centro pol√≠tico'"],
    "dominantPhilosophy": "Filosofias amplas conhecidas"
  },
  "spiritualInfluences": [
    {
      "name": "Influ√™ncias espirituais gerais (sem nomes espec√≠ficos inventados)",
      "manifestation": "Manifesta√ß√µes gerais observ√°veis",
      "counterStrategy": "Estrat√©gias b√≠blicas gerais"
    }
  ],
  "missionBases": [
    {
      "name": "Use termos gen√©ricos como 'Organiza√ß√µes mission√°rias locais'",
      "organization": "Denomina√ß√µes conhecidas geralmente presentes",
      "focus": "Focos ministeriais comuns",
      "impact": "Impactos t√≠picos gerais"
    }
  ],
  "revivalTestimonies": [
    {
      "title": "Movimentos gerais conhecidos da regi√£o (se existirem)",
      "description": "Descri√ß√µes baseadas em padr√µes hist√≥ricos conhecidos",
      "year": "Use apenas per√≠odos amplos se n√£o souber exato",
      "impact": "Impactos gerais documentados"
    }
  ],
  "intercessorActions": [
    "A√ß√µes gen√©ricas de intercess√£o baseadas em princ√≠pios b√≠blicos",
    "Orienta√ß√µes gerais de ora√ß√£o territorial",
    "Diretrizes espirituais universais"
  ],
  "spiritualClimate": {
    "description": "An√°lise geral baseada em padr√µes regionais conhecidos",
    "challenges": ["Desafios comuns a regi√µes similares"],
    "opportunities": ["Oportunidades baseadas em tend√™ncias conhecidas"],
    "trends": ["Tend√™ncias observ√°veis ou documentadas"]
  },
  "churches": {
    "estimate": "Use estimativas gerais conservadoras ou 'n√£o dispon√≠vel'",
    "denominations": ["Denomina√ß√µes tipicamente presentes na regi√£o"],
    "growth": "crescendo|est√°vel|declinando (baseado em tend√™ncias conhecidas)",
    "spiritualTemperature": "Avalia√ß√£o geral conservadora"
  },
  "culturalContext": "Contexto cultural geral conhecido da regi√£o",
  "languagesSpoken": ["Idiomas oficiais e principais conhecidos"],
  "religiousComposition": {
    "cristianismo": "Use apenas percentuais conhecidos ou estimativas muito gerais",
    "islamismo": "percentual",
    "outras_religioes": "percentual",
    "ocultismo": "percentual"
  }
}

üö® INSTRU√á√ïES CR√çTICAS:
1. N√ÉO invente nomes espec√≠ficos de pessoas, organiza√ß√µes ou eventos
2. Use APENAS informa√ß√µes factuais conhecidas ou termos gen√©ricos
3. Se n√£o souber dados espec√≠ficos, use frases como "Tipicamente", "Em geral", "Comumente"
4. Para estat√≠sticas, use apenas dados conhecidos ou indique "Estimativa geral"
5. Mantenha tom respeitoso e baseado em princ√≠pios b√≠blicos
6. JSON deve ser v√°lido e parse√°vel
7. Seja conservador e factual em todas as informa√ß√µes
`;
  }

  public async generateBatchData(regions: AIGenerationRequest[]): Promise<Array<{
    request: AIGenerationRequest;
    data?: SpiritualData;
    error?: string;
  }>> {
    const results = [];
    
    for (const request of regions) {
      try {
        const data = await this.generateSpiritualData(request);
        results.push({ request, data });
        
        // Pequeno delay para evitar rate limiting
        await new Promise(resolve => setTimeout(resolve, 1000));
      } catch (error) {
        results.push({
          request,
          error: error instanceof Error ? error.message : 'Erro desconhecido'
        });
      }
    }
    
    return results;
  }
}

// Inst√¢ncia singleton
export const aiService = new AIService();

export type { SpiritualData, AIGenerationRequest }; 