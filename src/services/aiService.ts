import OpenAI from 'openai';

// Interface para dados espirituais gerados pela IA
interface SpiritualData {
  strongholds: string[];
  propheticWord: string;
  prayerTargets: Array<{
    title: string;
    description: string;
    category: 'government' | 'church' | 'social' | 'economic' | 'spiritual_warfare' | 'evangelism' | 'other';
    priority: number;
    spiritualContext: string;
  }>;
  spiritualAlerts: Array<{
    type: 'persecution' | 'idolatry' | 'warfare' | 'breakthrough' | 'revival';
    description: string;
    urgency: 'low' | 'medium' | 'high' | 'critical';
    prayerFocus: string;
  }>;
  geopoliticalSystem: {
    governmentType: string;
    keyPositions: string[];
    powerCenters: string[];
    dominantPhilosophy: string;
  };
  spiritualInfluences: Array<{
    name: string;
    manifestation: string;
    counterStrategy: string;
  }>;
  missionBases: Array<{
    name: string;
    organization: string;
    focus: string;
    impact: string;
  }>;
  revivalTestimonies: Array<{
    title: string;
    description: string;
    year: string;
    impact: string;
  }>;
  intercessorActions: string[];
  spiritualClimate: {
    description: string;
    challenges: string[];
    opportunities: string[];
    trends: string[];
  };
  churches: {
    estimate: number;
    denominations: string[];
    growth: string;
    spiritualTemperature: string;
  };
  culturalContext: string;
  languagesSpoken: string[];
  religiousComposition: Record<string, number>;
}

interface AIGenerationRequest {
  regionName: string;
  regionType: 'country' | 'state' | 'city' | 'neighborhood';
  countryCode?: string;
  parentRegion?: string;
  coordinates?: { lat: number; lng: number };
  context?: string;
}

class AIService {
  private openai: OpenAI | null = null;
  private isConfigured = false;
  private assistantId = 'asst_IHcyezjYgoubvHpqcJjwvt1n'; // Your registered assistant

  constructor() {
    console.log('ü§ñ AI Service inicializado');
    this.initializeOpenAI();
  }

  private initializeOpenAI() {
    // Use environment variable for API key (Vite only)
    const apiKey = import.meta.env.VITE_OPENAI_API_KEY;
    
    if (!apiKey) {
      console.warn('‚ö†Ô∏è Chave API da OpenAI n√£o configurada. Funcionalidade AI desabilitada.');
      this.isConfigured = false;
      return;
    }
    
    try {
      this.openai = new OpenAI({
        apiKey: apiKey,
        dangerouslyAllowBrowser: true
      });
      this.isConfigured = true;
      console.log('‚úÖ OpenAI Assistant configurado com sucesso');
      console.log(`üéØ Assistant ID: ${this.assistantId}`);
    } catch (error) {
      console.error('‚ùå Erro ao configurar OpenAI:', error);
      this.isConfigured = false;
    }
  }

  public setApiKey(apiKey: string) {
    // This method is kept for compatibility but now uses the secure key
    console.log('‚ö†Ô∏è Usando chave API pr√©-configurada para seguran√ßa');
    this.initializeOpenAI();
  }

  public isReady(): boolean {
    return this.isConfigured && !!this.openai;
  }

  public async generateSpiritualData(request: AIGenerationRequest): Promise<SpiritualData> {
    try {
      console.log(`ü§ñ Gerando dados espirituais via Edge Function para ${request.regionName}...`);

      // Import din√¢mico do cliente Supabase
      const { supabase } = await import('@/integrations/supabase/client');
      const { data: { session } } = await supabase.auth.getSession();
      
      if (!session?.access_token) {
        throw new Error('‚ùå Usu√°rio n√£o autenticado. Fa√ßa login para continuar.');
      }

      // Obter URL do Supabase do cliente configurado
      const supabaseUrl = 'https://cxibuehwbuobwruhzwka.supabase.co';

      // Build the prompt using the existing method
      const prompt = this.buildPrompt(request);

      console.log(`üîó Chamando Edge Function: ${supabaseUrl}/functions/v1/bright-api`);

      // Chamar Edge Function com a estrutura correta
      const response = await fetch(`${supabaseUrl}/functions/v1/bright-api`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${session.access_token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          regionName: request.regionName,
          regionType: request.regionType,
          prompt: prompt,
          queueId: 'frontend-generated', // Temporary ID for frontend calls
          countryCode: request.countryCode,
          parentRegion: request.parentRegion,
          context: request.context
        })
      });

      if (!response.ok) {
        const errorData = await response.text();
        throw new Error(`üö® Erro na Edge Function: ${response.status} - ${errorData}`);
      }

      const result = await response.json();
      
      if (!result.success) {
        throw new Error(`‚ùå Erro interno: ${result.error}`);
      }

      console.log('‚úÖ Dados espirituais gerados com sucesso');
      console.log(`üìä Tokens utilizados: ${result.tokensUsed || 'N/A'}`);

      return result.data;

    } catch (error) {
      console.error('üí• Erro na gera√ß√£o AI:', error);
      throw new Error(`Falha na gera√ß√£o AI: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
    }
  }

  private buildPrompt(request: AIGenerationRequest): string {
    const { regionName, regionType, countryCode, parentRegion, context } = request;
    
    // Determine country context for better AI generation
    const countryContext = this.getCountryContext(countryCode, regionName, parentRegion);
    
    return `
Gere um relat√≥rio espiritual territorial para: ${regionName}
${countryCode ? `C√≥digo do pa√≠s: ${countryCode}` : ''}
${parentRegion ? `Regi√£o pai: ${parentRegion}` : ''}
${context ? `Contexto: ${context}` : ''}

${countryContext}

üèõÔ∏è Sistema Geopol√≠tico ‚Äì Informa√ß√µes sobre o sistema pol√≠tico e sua carga espiritual, incluindo:
- Tipo de governo${regionType === 'state' ? ' regional' : ''}
- Cargos principais${regionType === 'state' ? ' (Governador, Assembleia, etc.)' : ''}
- Locais f√≠sicos de poder${regionType === 'state' ? ' regional (Pal√°cio do Governo, Assembleia Legislativa, etc.)' : ' (como Pal√°cio do Planalto, Congresso, Tribunais etc.)'}
- Filosofias dominantes espiritualmente discern√≠veis${regionType === 'state' ? ' na regi√£o' : ' (ex: progressismo, idolatria mariana, secularismo etc.)'}

üî• Alvos de Intercess√£o ‚Äì Pontos espirituais estrat√©gicos${regionType === 'state' ? ' regionais' : ''} a serem cobertos em ora√ß√£o com precis√£o.

Formato da Resposta:

üèõÔ∏è Sistema Geopol√≠tico${regionType === 'state' ? ' Regional' : ''}:
- Tipo de governo:
- Cargos principais:
- Locais f√≠sicos de poder:
- Filosofia dominante:

üî• Alvos de Intercess√£o${regionType === 'state' ? ' Regional' : ''}:
- [item 1]
- [item 2] 
- [item 3]

Responda tamb√©m em formato JSON estruturado para facilitar o processamento:

{
  "strongholds": ["Use termos gerais adequados √† cultura regional como 'corrup√ß√£o', 'idolatria', 'secularismo', 'materialismo', 'viol√™ncia'"],
  "propheticWord": "Palavra prof√©tica geral baseada em princ√≠pios b√≠blicos universais e adequada ao contexto cultural",
  "prayerTargets": [
    {
      "title": "Alvos de ora√ß√£o espec√≠ficos para o contexto regional",
      "description": "Descri√ß√µes baseadas em padr√µes conhecidos da regi√£o",
      "category": "government|church|social|economic|spiritual_warfare|evangelism|other",
      "priority": 1-5,
      "spiritualContext": "Contexto espiritual relevante para a cultura local"
    }
  ],
  "spiritualAlerts": [
    {
      "type": "persecution|idolatry|warfare|breakthrough|revival",
      "description": "Alertas baseados em padr√µes regionais e situa√ß√£o atual conhecida",
      "urgency": "low|medium|high|critical",
      "prayerFocus": "Foco de ora√ß√£o adequado ao contexto regional"
    }
  ],
  "geopoliticalSystem": {
    "governmentType": "Tipo de governo conhecido (rep√∫blica, monarquia, democracia, etc.)",
    "keyPositions": ["Cargos espec√≠ficos do sistema pol√≠tico local"],
    "powerCenters": ["Centros de poder conhecidos na regi√£o"],
    "dominantPhilosophy": "Filosofias pol√≠ticas e sociais dominantes conhecidas"
  },
  "spiritualInfluences": [
    {
      "name": "Influ√™ncias espirituais conhecidas da regi√£o (sem inventar nomes espec√≠ficos)",
      "manifestation": "Como essas influ√™ncias se manifestam culturalmente",
      "counterStrategy": "Estrat√©gias b√≠blicas espec√≠ficas para combater essas influ√™ncias"
    }
  ],
  "missionBases": [
    {
      "name": "Use termos gen√©ricos como 'Organiza√ß√µes mission√°rias locais' ou denomina√ß√µes conhecidas",
      "organization": "Denomina√ß√µes ou movimentos tipicamente presentes na regi√£o",
      "focus": "Focos ministeriais comuns na cultura local",
      "impact": "Impactos t√≠picos conhecidos na regi√£o"
    }
  ],
  "revivalTestimonies": [
    {
      "title": "Movimentos de avivamento conhecidos da regi√£o (se existirem)",
      "description": "Descri√ß√µes baseadas em registros hist√≥ricos conhecidos",
      "year": "Use apenas per√≠odos documentados ou 'per√≠odo recente'",
      "impact": "Impactos documentados ou padr√µes conhecidos"
    }
  ],
  "intercessorActions": [
    "A√ß√µes espec√≠ficas de intercess√£o adequadas ao contexto cultural",
    "Orienta√ß√µes de ora√ß√£o territorial baseadas na realidade local",
    "Diretrizes espirituais considerando desafios regionais espec√≠ficos"
  ],
  "spiritualClimate": {
    "description": "An√°lise baseada no clima espiritual conhecido da regi√£o",
    "challenges": ["Desafios espec√≠ficos conhecidos da regi√£o"],
    "opportunities": ["Oportunidades baseadas no momento atual regional"],
    "trends": ["Tend√™ncias espirituais observ√°veis ou documentadas"]
  },
  "churches": {
    "estimate": "Use estimativas baseadas em dados conhecidos ou 'aproximadamente X mil'",
    "denominations": ["Denomina√ß√µes historicamente presentes e influentes na regi√£o"],
    "growth": "crescendo|est√°vel|declinando (baseado em tend√™ncias conhecidas)",
    "spiritualTemperature": "Avalia√ß√£o baseada no clima espiritual regional conhecido"
  },
  "culturalContext": "Contexto cultural espec√≠fico e relevante da regi√£o",
  "languagesSpoken": ["Idiomas oficiais e principais dialetos conhecidos"],
  "religiousComposition": {
    "cristianismo": "Use percentuais conhecidos ou estimativas regionais t√≠picas",
    "catolicismo": "percentual se aplic√°vel",
    "protestantismo": "percentual se aplic√°vel", 
    "islamismo": "percentual se aplic√°vel",
    "budismo": "percentual se aplic√°vel",
    "hinduismo": "percentual se aplic√°vel",
    "religioes_indigenas": "percentual se aplic√°vel",
    "outras_religioes": "percentual se aplic√°vel",
    "sem_religiao": "percentual se aplic√°vel"
  }
}

üö® INSTRU√á√ïES CR√çTICAS PARA GERA√á√ÉO GLOBAL:
1. N√ÉO invente nomes espec√≠ficos de pessoas, organiza√ß√µes ou eventos
2. Use APENAS informa√ß√µes factuais conhecidas ou termos gen√©ricos
3. Adapte o conte√∫do ao contexto cultural e religioso da regi√£o espec√≠fica
4. Para pa√≠ses com persegui√ß√£o crist√£, inclua alertas apropriados
5. Para pa√≠ses predominantemente isl√¢micos, hindu√≠stas ou budistas, ajuste o foco evangel√≠stico
6. Para pa√≠ses secularizados, foque em temas como materialismo e relativismo
7. Para pa√≠ses latinos, considere influ√™ncias cat√≥licas tradicionais
8. Para pa√≠ses africanos, considere religi√µes tribais e animismo
9. Para pa√≠ses asi√°ticos, considere filosofias orientais
10. Se n√£o souber dados espec√≠ficos, use frases como "Tipicamente", "Em geral", "Comumente"
11. Para estat√≠sticas, use apenas dados conhecidos ou indique "Estimativa geral"
12. Mantenha tom respeitoso e sens√≠vel culturalmente
13. JSON deve ser v√°lido e parse√°vel
14. Seja conservador e factual em todas as informa√ß√µes
15. Considere contexto geopol√≠tico atual sem inventar detalhes espec√≠ficos
`;
  }

  // New method to provide country-specific context
  private getCountryContext(countryCode?: string, regionName?: string, parentRegion?: string): string {
    const region = countryCode || regionName || parentRegion || '';
    const regionLower = region.toLowerCase();

    // South America
    if (regionLower.includes('brasil') || regionLower.includes('brazil')) {
      return `
CONTEXTO BRASILEIRO:
- Pa√≠s majoritariamente crist√£o (cat√≥lico e evang√©lico)
- Forte crescimento pentecostal e neopentecostal
- Influ√™ncias sincr√©ticas (umbanda, candombl√©)
- Desafios: corrup√ß√£o pol√≠tica, desigualdade social, viol√™ncia urbana
- Oportunidades: avivamento evang√©lico, miss√µes para povos n√£o alcan√ßados`;
    }
    
    if (regionLower.includes('argentina')) {
      return `
CONTEXTO ARGENTINO:
- Predominantemente cat√≥lico com crescimento evang√©lico
- Hist√≥ria de avivamentos em Buenos Aires
- Desafios: instabilidade econ√¥mica, crise pol√≠tica
- Influ√™ncias: catolicismo tradicional, secularismo urbano
- Oportunidades: juventude aberta ao evangelho`;
    }
    
    if (regionLower.includes('chile')) {
      return `
CONTEXTO CHILENO:
- Sociedade em transi√ß√£o religiosa
- Crescimento evang√©lico significativo
- Desafios: seculariza√ß√£o, materialismo
- Influ√™ncias: catolicismo conservador, liberalismo social
- Oportunidades: igrejas hist√≥ricas forte, jovens buscadores`;
    }

    if (regionLower.includes('colombia')) {
      return `
CONTEXTO COLOMBIANO:
- Tradicionalmente cat√≥lico com crescimento protestante
- Desafios: viol√™ncia, narcotr√°fico, corrup√ß√£o
- Processo de paz com FARC abre oportunidades
- Influ√™ncias: catolicismo popular, espiritismo
- Oportunidades: planta√ß√£o de igrejas em √°reas rurais`;
    }

    if (regionLower.includes('venezuela')) {
      return `
CONTEXTO VENEZUELANO:
- Crise humanit√°ria e pol√≠tica severa
- Igreja crescendo na adversidade
- Desafios: autoritarismo, crise econ√¥mica, migra√ß√£o
- Influ√™ncias: socialismo bolivariano, santer√≠a
- Oportunidades: igreja unida na ora√ß√£o, testemunho na crise`;
    }

    if (regionLower.includes('peru')) {
      return `
CONTEXTO PERUANO:
- Mistura de catolicismo e religi√µes ind√≠genas
- Crescimento evang√©lico em √°reas urbanas
- Desafios: corrup√ß√£o, desigualdade, sincretismo
- Influ√™ncias: religi√µes andinas, catolicismo popular
- Oportunidades: alcance aos povos ind√≠genas`;
    }

    // North America
    if (regionLower.includes('united states') || regionLower.includes('usa') || regionLower.includes('estados unidos')) {
      return `
CONTEXTO AMERICANO:
- Diversidade religiosa com forte presen√ßa crist√£
- Decl√≠nio do cristianismo tradicional, crescimento n√£o-denominacional
- Desafios: polariza√ß√£o pol√≠tica, seculariza√ß√£o, relativismo
- Influ√™ncias: materialismo, individualismo, pluralismo religioso
- Oportunidades: avivamento entre jovens, planta√ß√£o de igrejas √©tnicas`;
    }

    if (regionLower.includes('canada') || regionLower.includes('canad√°')) {
      return `
CONTEXTO CANADENSE:
- Sociedade secular com heran√ßa crist√£
- Decl√≠nio denominacional, crescimento carism√°tico
- Desafios: relativismo, multiculturalismo radical
- Influ√™ncias: liberalismo social, ate√≠smo pr√°tico
- Oportunidades: imigra√ß√£o crist√£, minist√©rio multicultural`;
    }

    if (regionLower.includes('mexico') || regionLower.includes('m√©xico')) {
      return `
CONTEXTO MEXICANO:
- Tradicionalmente cat√≥lico com crescimento protestante
- Influ√™ncias ind√≠genas e cat√≥licas fortes
- Desafios: cart√©is, corrup√ß√£o, viol√™ncia
- Influ√™ncias: catolicismo popular, santer√≠a, religi√µes pr√©-hisp√¢nicas
- Oportunidades: juventude aberta, crescimento pentecostal`;
    }

    // Europe
    if (regionLower.includes('alemanha') || regionLower.includes('germany')) {
      return `
CONTEXTO ALEM√ÉO:
- Sociedade p√≥s-crist√£ com igrejas hist√≥ricas em decl√≠nio
- Crescimento de igrejas de imigrantes
- Desafios: seculariza√ß√£o, ate√≠smo, islamiza√ß√£o
- Influ√™ncias: racionalismo, materialismo, relativismo
- Oportunidades: planta√ß√£o de igrejas, minist√©rio para refugiados`;
    }

    if (regionLower.includes('fran√ßa') || regionLower.includes('france')) {
      return `
CONTEXTO FRANC√äS:
- Secularismo radical (la√Øcit√©)
- Decl√≠nio cat√≥lico, crescimento isl√¢mico
- Desafios: ate√≠smo militante, relativismo, islamiza√ß√£o
- Influ√™ncias: iluminismo, existencialismo, materialismo
- Oportunidades: igrejas de imigrantes, juventude em busca`;
    }

    // Africa
    if (regionLower.includes('nigeria') || regionLower.includes('nig√©ria')) {
      return `
CONTEXTO NIGERIANO:
- Dividido entre cristianismo (sul) e islamismo (norte)
- Crescimento evang√©lico explosivo
- Desafios: persegui√ß√£o crist√£ no norte, corrup√ß√£o, Boko Haram
- Influ√™ncias: religi√µes tradicionais africanas, islamismo radical
- Oportunidades: centro mission√°rio para √Åfrica, avivamento`;
    }

    // Asia
    if (regionLower.includes('china')) {
      return `
CONTEXTO CHIN√äS:
- Igreja subterr√¢nea em crescimento sob persegui√ß√£o
- Ate√≠smo estatal oficial
- Desafios: persegui√ß√£o governamental, controle religioso
- Influ√™ncias: marxismo, confucionismo, budismo, tao√≠smo
- Oportunidades: igreja dom√©stica resiliente, juventude urbana`;
    }

    if (regionLower.includes('india') || regionLower.includes('√≠ndia')) {
      return `
CONTEXTO INDIANO:
- Predominantemente hindu com minoria crist√£ perseguida
- Nacionalismo hindu crescente
- Desafios: persegui√ß√£o religiosa, sistema de castas
- Influ√™ncias: hindu√≠smo, budismo, islamismo, sikhismo
- Oportunidades: movimentos de convers√£o em massa, igreja dalita`;
    }

    // Middle East
    if (regionLower.includes('israel')) {
      return `
CONTEXTO ISRAELENSE:
- Estado judeu com minoria crist√£ √°rabe
- Crescimento de judeus messi√¢nicos
- Desafios: conflito √°rabe-israelense, ortodoxia judaica
- Influ√™ncias: juda√≠smo ortodoxo, secularismo, islamismo
- Oportunidades: profecias sobre restaura√ß√£o, evangelismo judaico`;
    }

    // Default context for unknown regions
    return `
CONTEXTO GERAL:
- Analise baseado em padr√µes regionais conhecidos
- Considere influ√™ncias culturais e religiosas predominantes
- Adapte aos desafios sociopol√≠ticos comuns da regi√£o
- Use conhecimento geral sobre clima espiritual regional`;
  }

  public async generateBatchData(regions: AIGenerationRequest[]): Promise<Array<{
    request: AIGenerationRequest;
    data?: SpiritualData;
    error?: string;
  }>> {
    const results = [];
    
    for (const request of regions) {
      try {
        const data = await this.generateSpiritualData(request);
        results.push({ request, data });
        
        // Pequeno delay para evitar rate limiting
        await new Promise(resolve => setTimeout(resolve, 1000));
      } catch (error) {
        results.push({
          request,
          error: error instanceof Error ? error.message : 'Erro desconhecido'
        });
      }
    }
    
    return results;
  }

  public async generateSpiritualDataForCountry(
    countryCode: string, 
    countryName: string,
    coordinates?: { lat: number; lng: number }
  ): Promise<SpiritualData> {
    try {
      console.log(`ü§ñ Gerando dados espirituais para ${countryName} (${countryCode})...`);

      const request: AIGenerationRequest = {
        regionName: countryName,
        regionType: 'country',
        countryCode: countryCode,
        coordinates: coordinates,
        context: `An√°lise espiritual territorial para o pa√≠s ${countryName}`
      };

      return await this.generateSpiritualData(request);

    } catch (error) {
      console.error(`üí• Erro na gera√ß√£o AI para ${countryName}:`, error);
      throw new Error(`Falha na gera√ß√£o AI para ${countryName}: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
    }
  }

  public async updateSpiritualRegion(
    countryCode: string,
    spiritualData: SpiritualData
  ): Promise<void> {
    try {
      const { supabase } = await import('@/integrations/supabase/client');
      
      const { error: updateError } = await supabase
        .from('spiritual_regions')
        .update({
          spiritual_data: {
            ...spiritualData,
            ai_model: 'gpt-4o-2024-08-06',
            generated_at: new Date().toISOString(),
            source: 'ai_generated',
            version: '2.0'
          }
        })
        .eq('country_code', countryCode)
        .eq('region_type', 'country');

      if (updateError) {
        throw new Error(`Erro ao salvar no banco: ${updateError.message}`);
      }

      console.log(`‚úÖ Dados espirituais salvos para ${countryCode}`);

    } catch (error) {
      console.error(`‚ùå Erro ao atualizar regi√£o espiritual:`, error);
      throw error;
    }
  }

  public async generateAndSaveForCountry(
    countryCode: string,
    countryName: string,
    coordinates?: { lat: number; lng: number }
  ): Promise<void> {
    try {
      // Gerar dados espirituais
      const spiritualData = await this.generateSpiritualDataForCountry(
        countryCode, 
        countryName, 
        coordinates
      );

      // Salvar no banco
      await this.updateSpiritualRegion(countryCode, spiritualData);

      console.log(`üéâ Processo completo para ${countryName} (${countryCode})`);

    } catch (error) {
      console.error(`üí• Erro no processo completo para ${countryName}:`, error);
      throw error;
    }
  }
}

// Inst√¢ncia singleton
export const aiService = new AIService();

export type { SpiritualData, AIGenerationRequest }; 