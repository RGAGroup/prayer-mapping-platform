// üìä AN√ÅLISE COMPLETA DOS DADOS ATUAIS
// Identifica gaps e define estrat√©gia de expans√£o

const { createClient } = require("@supabase/supabase-js");

const supabaseUrl = "https://cxibuehwbuobwruhzwka.supabase.co";
const supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN4aWJ1ZWh3YnVvYndydWh6d2thIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA0ODM1MTIsImV4cCI6MjA2NjA1OTUxMn0.ElIj9TZvwu-0cXhypRUylA0glF2V7F2WNnrdTzJZbd4";

const supabase = createClient(supabaseUrl, supabaseKey);

async function analyzeCurrentData() {
  console.log('üìä AN√ÅLISE COMPLETA DOS DADOS ATUAIS');
  console.log('='.repeat(60));

  try {
    // 1. CONTAGEM TOTAL
    const { data: allRegions, error } = await supabase
      .from('spiritual_regions')
      .select('name, region_type, parent_region_id, spiritual_data')
      .order('region_type, name');

    if (error) {
      console.error('‚ùå Erro ao buscar dados:', error);
      return;
    }

    console.log(`üìà TOTAL DE REGI√ïES: ${allRegions.length}`);
    console.log('');

    // 2. CONTAGEM POR TIPO
    const byType = allRegions.reduce((acc, region) => {
      acc[region.region_type] = (acc[region.region_type] || 0) + 1;
      return acc;
    }, {});

    console.log('üìä DISTRIBUI√á√ÉO POR TIPO:');
    Object.entries(byType).forEach(([type, count]) => {
      console.log(`  ${type.toUpperCase()}: ${count}`);
    });
    console.log('');

    // 3. PA√çSES COM DADOS ESPIRITUAIS
    const countries = allRegions.filter(r => r.region_type === 'country');
    const countriesWithData = countries.filter(r => r.spiritual_data && Object.keys(r.spiritual_data).length > 0);

    console.log('üåç AN√ÅLISE DE PA√çSES:');
    console.log(`  Total de pa√≠ses: ${countries.length}`);
    console.log(`  Com dados espirituais: ${countriesWithData.length}`);
    console.log(`  Sem dados espirituais: ${countries.length - countriesWithData.length}`);
    console.log('');

    // 4. PA√çSES SEM DADOS ESPIRITUAIS
    const countriesWithoutData = countries.filter(r => !r.spiritual_data || Object.keys(r.spiritual_data).length === 0);
    if (countriesWithoutData.length > 0) {
      console.log('‚ö†Ô∏è PA√çSES SEM DADOS ESPIRITUAIS:');
      countriesWithoutData.slice(0, 10).forEach(country => {
        console.log(`  - ${country.name}`);
      });
      if (countriesWithoutData.length > 10) {
        console.log(`  ... e mais ${countriesWithoutData.length - 10} pa√≠ses`);
      }
      console.log('');
    }

    // 5. AN√ÅLISE DE ESTADOS/PROV√çNCIAS
    const states = allRegions.filter(r => r.region_type === 'state');
    console.log('üèõÔ∏è AN√ÅLISE DE ESTADOS/PROV√çNCIAS:');
    console.log(`  Total de estados: ${states.length}`);

    // Agrupar por pa√≠s pai
    const statesByCountry = states.reduce((acc, state) => {
      const country = state.parent_region_id || 'Sem pa√≠s pai';
      acc[country] = (acc[country] || 0) + 1;
      return acc;
    }, {});

    console.log('  Estados por pa√≠s:');
    Object.entries(statesByCountry)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 10)
      .forEach(([country, count]) => {
        console.log(`    ${country}: ${count} estados`);
      });
    console.log('');

    // 6. PA√çSES SEM ESTADOS
    const countriesWithStates = Object.keys(statesByCountry);
    const countriesWithoutStates = countries.filter(c => !countriesWithStates.includes(c.name));

    console.log('üîç PA√çSES SEM ESTADOS/PROV√çNCIAS CADASTRADOS:');
    console.log(`  Total: ${countriesWithoutStates.length} pa√≠ses`);
    countriesWithoutStates.slice(0, 15).forEach(country => {
      console.log(`  - ${country.name}`);
    });
    if (countriesWithoutStates.length > 15) {
      console.log(`  ... e mais ${countriesWithoutStates.length - 15} pa√≠ses`);
    }
    console.log('');

    // 7. AN√ÅLISE DE CIDADES
    const cities = allRegions.filter(r => r.region_type === 'city');
    console.log('üèôÔ∏è AN√ÅLISE DE CIDADES:');
    console.log(`  Total de cidades: ${cities.length}`);
    console.log('');

    // 8. SUGEST√ïES DE EXPANS√ÉO
    console.log('üöÄ ESTRAT√âGIA DE EXPANS√ÉO RECOMENDADA:');
    console.log('');
    console.log('üìã PRIORIDADE 1 - PA√çSES FALTANTES:');
    console.log('  ‚Ä¢ Identificar pa√≠ses n√£o cadastrados ainda');
    console.log('  ‚Ä¢ Focar em pa√≠ses importantes (G20, etc)');
    console.log('');
    console.log('üìã PRIORIDADE 2 - ESTADOS DE PA√çSES GRANDES:');
    console.log('  ‚Ä¢ Completar estados dos pa√≠ses principais:');
    
    const majorCountries = ['United States', 'China', 'Russia', 'Brazil', 'India', 'Canada', 'Australia'];
    majorCountries.forEach(country => {
      const stateCount = statesByCountry[country] || 0;
      console.log(`    - ${country}: ${stateCount} estados cadastrados`);
    });
    console.log('');
    console.log('üìã PRIORIDADE 3 - CIDADES PRINCIPAIS:');
    console.log('  ‚Ä¢ Adicionar capitais mundiais');
    console.log('  ‚Ä¢ Cidades com mais de 1 milh√£o de habitantes');
    console.log('  ‚Ä¢ Centros espirituais importantes');
    console.log('');

    // 9. RESUMO FINAL
    console.log('='.repeat(60));
    console.log('üìä RESUMO EXECUTIVO:');
    console.log(`  üåç Total atual: ${allRegions.length} regi√µes`);
    console.log(`  üó∫Ô∏è Pa√≠ses: ${countries.length} (${countriesWithData.length} com dados)`);
    console.log(`  üèõÔ∏è Estados: ${states.length}`);
    console.log(`  üèôÔ∏è Cidades: ${cities.length}`);
    console.log(`  üìà Potencial expans√£o: ~${countriesWithoutStates.length * 10} novos estados`);
    console.log(`  üéØ Meta final: ~2000+ regi√µes`);
    console.log('='.repeat(60));

    return {
      totalRegions: allRegions.length,
      countries: countries.length,
      states: states.length, 
      cities: cities.length,
      countriesWithoutStates: countriesWithoutStates.length,
      expansionPotential: countriesWithoutStates.length * 10
    };

  } catch (error) {
    console.error('üí• Erro na an√°lise:', error);
  }
}

// Executar an√°lise
analyzeCurrentData().then(() => {
  console.log('‚úÖ An√°lise conclu√≠da!');
  process.exit(0);
});